-- title

VS Code To CSS Theme Converter

This is how I'm converting VS Code Themes into CSS files that
work with the output from the
<<link|rust syntect highlighting crate|https://docs.rs/syntect/latest/syntect/>>
when it's set up to output classes instead of inilne styles. (TODO: link
to post on syntact highlighting with classes)

-- h2

Notes

-- list

- You can get themes from the <<tablink|VS Code Themes site|https://vscodethemes.com/>>


-- h2

The Conversion Process

-- olist/

- Set the background color of this page here:

-- html/

<label for="site-background-color">Site Background Color</label>
<input id="site-background-color" type="text" size="40" />

-- /html


- Install your desired theme in VS Code and switch to it

- Open the command palette with on mac with:

<<kbd|COMMAND>>+<<kbd|SHIFT>>+<<kbd|p>>

or Windows with:

<<kbd|CONTROL>>+<<kbd|SHIFT>>+<<kbd|p>> 

- Run the VS Code command: 

-- pre/

Developer: Generate Color Theme From Current Settings

-- /pre

- Copy the resulting JSON into this field:

-- html/

<div>
<label for="vs-code-input">VS Code Theme Input</label>
<textarea id="vs-code-input" cols="60" rows="8">{
	"$schema": "vscode://schemas/color-theme",
	"type": "hcDark",
	"colors": {
		"actionBar.toggledBackground": "#383a49",
		"editor.background": "#000000",
		"editor.foreground": "#ffffff",
		"editor.selectionBackground": "#000099",
		"editor.selectionForeground": "#cccccc",
		"editorIndentGuide.activeBackground1": "#ffffff",
		"editorIndentGuide.background1": "#ffffff",
		"editorWhitespace.foreground": "#7c7c7c",
		"ports.iconRunningProcessForeground": "#ffffff",
		"selection.background": "#008000",
		"sideBarTitle.foreground": "#ffffff",
		"statusBarItem.remoteBackground": "#00000000"
	},
	"tokenColors": [
		{
			"scope": [
				"meta.embedded",
				"source.groovy.embedded",
				"string meta.image.inline.markdown",
				"variable.legacy.builtin.python"
			],
			"settings": {
				"foreground": "#FFFFFF"
			}
		},
		{
			"scope": "emphasis",
			"settings": {
				"fontStyle": "italic"
			}
		},
		{
			"scope": "strong",
			"settings": {
				"fontStyle": "bold"
			}
		},
		{
			"scope": "meta.diff.header",
			"settings": {
				"foreground": "#000080"
			}
		},
		{
			"scope": "comment",
			"settings": {
				"foreground": "#7CA668"
			}
		},
		{
			"scope": "constant.language",
			"settings": {
				"foreground": "#569CD6"
			}
		},
		{
			"scope": [
				"constant.numeric",
				"constant.other.color.rgb-value",
				"constant.other.rgb-value",
				"support.constant.color"
			],
			"settings": {
				"foreground": "#B5CEA8"
			}
		},
		{
			"scope": "constant.regexp",
			"settings": {
				"foreground": "#B46695"
			}
		},
		{
			"scope": "constant.character",
			"settings": {
				"foreground": "#569CD6"
			}
		},
		{
			"scope": "entity.name.tag",
			"settings": {
				"foreground": "#569CD6"
			}
		},
		{
			"scope": [
				"entity.name.tag.css",
				"entity.name.tag.less"
			],
			"settings": {
				"foreground": "#D7BA7D"
			}
		},
		{
			"scope": "entity.other.attribute-name",
			"settings": {
				"foreground": "#9CDCFE"
			}
		},
		{
			"scope": [
				"entity.other.attribute-name.class.css",
				"source.css entity.other.attribute-name.class",
				"entity.other.attribute-name.id.css",
				"entity.other.attribute-name.parent-selector.css",
				"entity.other.attribute-name.parent.less",
				"source.css entity.other.attribute-name.pseudo-class",
				"entity.other.attribute-name.pseudo-element.css",
				"source.css.less entity.other.attribute-name.id",
				"entity.other.attribute-name.scss"
			],
			"settings": {
				"foreground": "#D7BA7D"
			}
		},
		{
			"scope": "invalid",
			"settings": {
				"foreground": "#F44747"
			}
		},
		{
			"scope": "markup.underline",
			"settings": {
				"fontStyle": "underline"
			}
		},
		{
			"scope": "markup.bold",
			"settings": {
				"fontStyle": "bold"
			}
		},
		{
			"scope": "markup.heading",
			"settings": {
				"foreground": "#6796E6",
				"fontStyle": "bold"
			}
		},
		{
			"scope": "markup.italic",
			"settings": {
				"fontStyle": "italic"
			}
		},
		{
			"scope": "markup.strikethrough",
			"settings": {
				"fontStyle": "strikethrough"
			}
		},
		{
			"scope": "markup.inserted",
			"settings": {
				"foreground": "#B5CEA8"
			}
		},
		{
			"scope": "markup.deleted",
			"settings": {
				"foreground": "#CE9178"
			}
		},
		{
			"scope": "markup.changed",
			"settings": {
				"foreground": "#569CD6"
			}
		},
		{
			"scope": [
				"punctuation.definition.tag"
			],
			"settings": {
				"foreground": "#808080"
			}
		},
		{
			"scope": "meta.preprocessor",
			"settings": {
				"foreground": "#569CD6"
			}
		},
		{
			"scope": "meta.preprocessor.string",
			"settings": {
				"foreground": "#CE9178"
			}
		},
		{
			"scope": "meta.preprocessor.numeric",
			"settings": {
				"foreground": "#B5CEA8"
			}
		},
		{
			"scope": "meta.structure.dictionary.key.python",
			"settings": {
				"foreground": "#9CDCFE"
			}
		},
		{
			"scope": "storage",
			"settings": {
				"foreground": "#569CD6"
			}
		},
		{
			"scope": "storage.type",
			"settings": {
				"foreground": "#569CD6"
			}
		},
		{
			"scope": "storage.modifier",
			"settings": {
				"foreground": "#569CD6"
			}
		},
		{
			"scope": "string",
			"settings": {
				"foreground": "#CE9178"
			}
		},
		{
			"scope": "string.tag",
			"settings": {
				"foreground": "#CE9178"
			}
		},
		{
			"scope": "string.value",
			"settings": {
				"foreground": "#CE9178"
			}
		},
		{
			"scope": "string.regexp",
			"settings": {
				"foreground": "#D16969"
			}
		},
		{
			"scope": [
				"punctuation.definition.template-expression.begin",
				"punctuation.definition.template-expression.end",
				"punctuation.section.embedded"
			],
			"settings": {
				"foreground": "#569CD6"
			}
		},
		{
			"scope": [
				"meta.template.expression"
			],
			"settings": {
				"foreground": "#FFFFFF"
			}
		},
		{
			"scope": [
				"support.type.vendored.property-name",
				"support.type.property-name",
				"source.css variable",
				"source.coffee.embedded"
			],
			"settings": {
				"foreground": "#D4D4D4"
			}
		},
		{
			"scope": "keyword",
			"settings": {
				"foreground": "#569CD6"
			}
		},
		{
			"scope": "keyword.control",
			"settings": {
				"foreground": "#569CD6"
			}
		},
		{
			"scope": "keyword.operator",
			"settings": {
				"foreground": "#D4D4D4"
			}
		},
		{
			"scope": [
				"keyword.operator.new",
				"keyword.operator.expression",
				"keyword.operator.cast",
				"keyword.operator.sizeof",
				"keyword.operator.logical.python"
			],
			"settings": {
				"foreground": "#569CD6"
			}
		},
		{
			"scope": "keyword.other.unit",
			"settings": {
				"foreground": "#B5CEA8"
			}
		},
		{
			"scope": "support.function.git-rebase",
			"settings": {
				"foreground": "#D4D4D4"
			}
		},
		{
			"scope": "constant.sha.git-rebase",
			"settings": {
				"foreground": "#B5CEA8"
			}
		},
		{
			"scope": [
				"storage.modifier.import.java",
				"variable.language.wildcard.java",
				"storage.modifier.package.java"
			],
			"settings": {
				"foreground": "#D4D4D4"
			}
		},
		{
			"scope": "variable.language.this",
			"settings": {
				"foreground": "#569CD6"
			}
		},
		{
			"scope": [
				"entity.name.function",
				"support.function",
				"support.constant.handlebars",
				"source.powershell variable.other.member"
			],
			"settings": {
				"foreground": "#DCDCAA"
			}
		},
		{
			"scope": [
				"support.class",
				"support.type",
				"entity.name.type",
				"entity.name.namespace",
				"entity.name.scope-resolution",
				"entity.name.class",
				"storage.type.cs",
				"storage.type.generic.cs",
				"storage.type.modifier.cs",
				"storage.type.variable.cs",
				"storage.type.annotation.java",
				"storage.type.generic.java",
				"storage.type.java",
				"storage.type.object.array.java",
				"storage.type.primitive.array.java",
				"storage.type.primitive.java",
				"storage.type.token.java",
				"storage.type.groovy",
				"storage.type.annotation.groovy",
				"storage.type.parameters.groovy",
				"storage.type.generic.groovy",
				"storage.type.object.array.groovy",
				"storage.type.primitive.array.groovy",
				"storage.type.primitive.groovy"
			],
			"settings": {
				"foreground": "#4EC9B0"
			}
		},
		{
			"scope": [
				"meta.type.cast.expr",
				"meta.type.new.expr",
				"support.constant.math",
				"support.constant.dom",
				"support.constant.json",
				"entity.other.inherited-class"
			],
			"settings": {
				"foreground": "#4EC9B0"
			}
		},
		{
			"scope": [
				"keyword.control",
				"source.cpp keyword.operator.new",
				"source.cpp keyword.operator.delete",
				"keyword.other.using",
				"keyword.other.directive.using",
				"keyword.other.operator"
			],
			"settings": {
				"foreground": "#C586C0"
			}
		},
		{
			"scope": [
				"variable",
				"meta.definition.variable.name",
				"support.variable"
			],
			"settings": {
				"foreground": "#9CDCFE"
			}
		},
		{
			"scope": [
				"meta.object-literal.key"
			],
			"settings": {
				"foreground": "#9CDCFE"
			}
		},
		{
			"scope": [
				"support.constant.property-value",
				"support.constant.font-name",
				"support.constant.media-type",
				"support.constant.media",
				"constant.other.color.rgb-value",
				"constant.other.rgb-value",
				"support.constant.color"
			],
			"settings": {
				"foreground": "#CE9178"
			}
		},
		{
			"scope": "meta.resultLinePrefix.contextLinePrefix.search",
			"settings": {
				"foreground": "#CBEDCB"
			}
		},
		{
			"scope": "token.info-token",
			"settings": {
				"foreground": "#6796E6"
			}
		},
		{
			"scope": "token.warn-token",
			"settings": {
				"foreground": "#008000"
			}
		},
		{
			"scope": "token.error-token",
			"settings": {
				"foreground": "#FF0000"
			}
		},
		{
			"scope": "token.debug-token",
			"settings": {
				"foreground": "#B267E6"
			}
		}
	]
}</textarea>
</div>

<p>You can also choose one of these pre-downloaded selections</p>

<p>Light</p>
<ul id="preloaded-themes-light"><li>Loading...</li></ul>

<p>Dark</p>
<ul id="preloaded-themes-dark"><li>Loading...</li></ul>

-- /html

- Check this preview to see how things look:

-- code/
-- python
-- title: Python Sample

# This is a very long line that is used to test turning on and off the wrapping with the button in the status bar area below. Try it to see what happens.

from django.urls import path

from . import views

app_name = "notes"
urlpatterns = [
    path("", views.index, name="index"),
    path("create/", views.create, name="create"),
    path("<int:pk>/", views.view, name="view"),
    path("<int:pk>/edit/", views.edit, name="edit"),
]

-- /code

-- code/
-- html
-- title: HTML Sample

<!DOCTYPE html>
<html lang="en">
<body>
  <h1>Hello, World</h1>
</body>
</html>

-- /code

-- code/
-- javascript
-- title: JavaScript Sample

const example = {
    a: "alfa",
    b: "bravo",
    c: "charlie",
    d: "delta"
}

for (const k of Object.keys(example)) {
    console.log(k)
}

-- /code


- Copy the CSS from here into your site:

-- html/

<div>
<label for="css-output">CSS Output</label>
<textarea id="css-output" cols="60" rows="8"></textarea>
</div>

-- /html


-- /olist


-- h2

Notes

-- list

- The first themes I used didn't have background colors for
any of the fonts so not sure I'm guessing at how to parse
them for now.

-- h2

TODO

-- list

- Set up so you can skip the output for the code block
forground and/or background colors

- Set up so you can dynamically change the background
color of this page for easier referece to other sites


-- html

<script type="module">
  import JSON5 from '/theme/scripts/json5.min.mjs'
  
  const stylesheetEl = document.createElement("style")
  let preloadedThemes = {}
  let colorType = "DARK"

  function addEventListeners() {
    document.querySelector("#vs-code-input").addEventListener("input", convertTheme)
		document.querySelector("#site-background-color").addEventListener("input", updateBackgroundColor)
  }

  function convertTheme() {
    const themeInEl = document.querySelector("#vs-code-input")
    const data = JSON5.parse(themeInEl.value)
    const newData = []
    data.tokenColors.forEach((tokenColor) => {
      const scopeType = typeof(tokenColor.scope)
      if (scopeType == "string") {
        newData.push(
          {
            selectors: [tokenColor.scope],
            settings: tokenColor.settings
          }
        )
      } else {
        newData.push(
          {
            selectors: tokenColor.scope,
            settings: tokenColor.settings
          }
        )
      }
    })


    const cssOutEl = document.querySelector("#css-output")
    const borderSize = "1px"

    const styles = [`/* START ${colorType} CODE STYLES */\n`]
    styles.push(`:root { --highlight-radius: 0.3rem; }`)
    styles.push(`.line-numbers { counter-reset: lineNumber; }`)
    styles.push(`.line-marker { counter-increment: lineNumber; color: ${getLineNumbersForegroundColor(data)}; }`)
    styles.push(`.line-marker:before { content: counter(lineNumber); display: inline-block; margin-left: -6.5ch; padding-right: 1.7ch; text-align: end; width: 7.5ch; }`)
    styles.push(`.highlight-grid { display: grid; grid-template-columns: 4.6ch 1fr; }`)
    styles.push(`.highlight-wrapper { color: ${getWrapperForegroundColor(data)}; background-color: ${getWrapperBackgroundColor(data)}; border-radius: var(--highlight-radius); border: ${borderSize} solid ${getBorderColor(data)}; }`)
    styles.push(`.highlight-title { color: ${getTitleBarForegroundColor(data)}; background-color: ${getTitleBarBackgroundColor(data)}; padding-block: 0.3rem; border-top-left-radius: var(--highlight-radius); border-top-right-radius: var(--highlight-radius); border-bottom: ${borderSize} solid ${getBorderColor(data)}; text-align: center; }`)
    styles.push(`.highlight-status-bar { text-align: right; padding: 0.3rem; border-top: ${borderSize} solid ${getBorderColor(data)}; }`)
    styles.push(`.highlight-block { padding-block: 0.5rem; background-color: ${getEditorBackgroundColor(data)}; overflow-wrap: break-word; white-space: pre-wrap; border-left: ${borderSize} solid ${getBorderColor(data)}; }`)
    styles.push(newData.map((rule) => {
      return `${getSelectors(rule)} \{ ${getSelectorForegroundColor(rule)} ${getSelectorStyle(rule)} \}`
    }).join(" "))
    styles.push(`\n/* END ${colorType} CODE STYLES */`)

    const stylesheetString = styles.join(" ")
    stylesheetEl.innerHTML = stylesheetString
    document.head.appendChild(stylesheetEl)
    cssOutEl.value = stylesheetString
  }

  function findColor(data, queries, backup) {
    const c = data['colors']
    let returnColor = backup
    for (let i = 0; i < queries.length; i++) {
      const q = queries[i]
      if (c[q]) {
        // console.log(`Found: ${q} - ${c[q]}`)
        returnColor = c[q]
        i = queries.length
      }
    }
    return returnColor
  }


  function getBaseBackgroundColor(data) {
    if (data['type'] === 'light' || data['type'] === 'hcLight') {
      return "white"
    } else {
      return "black"
    }
  }

  function getBaseForegroundColor(data) {
    return getBaseBackgroundColor(data) === "white" ? "black" : "white"
  }

  function getBorderColor(data) {
    return findColor(
      data,
      [
      'editor.foreground',
      ],
      getBaseForegroundColor(data)
    )
  }

  function getEditorBackgroundColor(data) {
    return findColor(
      data,
      [
      'editor.background',
      ],
      getBaseBackgroundColor(data)
    )
  }


  function getLineNumbersBackgroundColor(data) {
    return findColor(
      data,
      [
      'activityBar.background',
      'sideBarTitle.background',
      ],
      getBaseBackgroundColor(data)
    )
  }

  function getLineNumbersForegroundColor(data) {
    return findColor(
      data,
      [
      'activityBar.foreground',
      'sideBarTitle.foreground',
      ],
      getBaseForegroundColor(data)
    )
  }

  function getPreloadedTheme(event) {
    const k = event.target.dataset.key
    const el = document.querySelector("#vs-code-input")
    colorType = preloadedThemes[k]['type'].toUpperCase()
    el.value = JSON5.stringify(preloadedThemes[k])
    convertTheme()
  }

  function getSelectors(rule) {
    return rule.selectors.map((selector) => { return `.${selector}` }).join(",")
  }

  function getSelectorForegroundColor(rule) {
    if (rule.settings.foreground) {
      return `color: ${rule.settings.foreground};`
    } else {
      return ""
    }
  }

  function getSelectorStyle(rule) {
    return "font-style: bold; "
  }

  function getTitleBarForegroundColor(data) {
    return findColor(
      data,
      ['titleBar.activeForeground', 'editor.foreground'],
      getBaseForegroundColor(data)
    )
  }

  function getTitleBarBackgroundColor(data) {
    return findColor(
      data,
      ['titleBar.activeBackground', 'editor.background'],
      getBaseForegroundColor(data)
    )
  }

  function getWrapperBackgroundColor(data) {
    return findColor(
      data,
      ['titleBar.inactiveBackground'],
      getBaseBackgroundColor(data)
    )
  }

  function getWrapperForegroundColor(data) {
    return findColor(
      data,
      ['editor.foreground'],
      getBaseForegroundColor(data)
    )
  }



/*

  function getInternalBorder(data) {
    const c = data['colors']
    if (c['activityBar.border']) {
      return c['activityBar.border']
    } else if (c['activityBar.activeBorder']) {
      return c['activityBar.activeBorder']
    } else if (c['activityBar.foreground']) {
      return c['activityBar.foreground']
    } else {
      return getSidebarForegroundColor(data) 
    }
  }

  function getEditorBackground(data) {
    if (data['colors']['editor.background']) {
      return data['colors']['editor.background']
    } else {
      return getBaseBackgroundColor(data)
    }
  }

  function getBackground(v) {
    if (v.settings.background) {
      return `background-color: ${v.settings.background}; `
    } else {
      return ""
    }
  }

  function getColor(v) {
    if (v.settings.foreground) {
      return `color: ${v.settings.foreground}; `
    } else {
      return ""
    }
  }

  function getNumberColor(data) {
    if (data['colors']['editorLineNumber.foreground']) {
      return data['colors']['editorLineNumber.foreground']
    } else if (data['colors']['editor.foreground']) {
      return data['colors']['editor.foreground']
    } else {
      return "blue"
    }
  }


  function getStyle(v) {
    if (v.settings.fontStyle) {
      return `font-style: ${v.settings.fontStyle}; `
    } else {
      return ""
    }
  }


  function getSidebarBackgroundColor(data) {
    const c = data['colors']
    if (c['activityBar.background']) {
      return c['activityBar.background']
    } else if (c['editor.background']) {
      return c['editor.background']
    } else {
      return "black"
    }
  }

  function getSidebarForegroundColor(data) {
    const c = data['colors']
    if (c['activityBarBadge.foreground']) {
      return c['activityBarBadge.foreground']
    } else if (c['activityBar.foreground']) {
      return c['activityBar.foreground']
    } else  {
      return getBaseForegroundColor(data)
    }
  }

  function getTitleBackgroundColor(data) {
    return "red";
  }

  function getTitleForegroundColor(data) {
    return "blue"
  }

  function getWrappers(data) {
    const wrapperSelectors = document.querySelector("#wrapper-selectors").value
    // Looks like VS Code defaults to white so
    // duplicating that behavior here:
    const color = getSidebarForegroundColor(data)
    const bg = getSidebarBackgroundColor(data)
    return `${wrapperSelectors} { color: ${color}; background-color: ${bg}; } `
  }
  */

  function preloadThemes() {
    fetch('/theme/tmp/vs-code-themes.jsonc')
      .then((response) => {
        if (!response.ok) {
          throw new Error('There was a problem getting the data')
        }
        return response.text()
      })
      .then((data) => 
      {
        const parsedData = JSON5.parse(data)
        preloadedThemes = parsedData.themes
        const preloadedLight = document.querySelector("#preloaded-themes-light")
        preloadedLight.innerHTML = ""
        const preloadedDark = document.querySelector("#preloaded-themes-dark")
        preloadedDark.innerHTML = ""
        for (const k in preloadedThemes) {
          const newTheme = document.createElement("li")
          const newButton = document.createElement("button")
          newButton.dataset.key = k
          newButton.innerHTML = k
          newButton.addEventListener("click", getPreloadedTheme)
          newTheme.appendChild(newButton)
          if (preloadedThemes[k]['type'] === "light") {
            preloadedLight.appendChild(newTheme)
          } else if (preloadedThemes[k]['type'] === "hcLight") {
            preloadedLight.appendChild(newTheme)
          } else if (preloadedThemes[k]['type'] === "hcDark") {
            preloadedDark.appendChild(newTheme)
          } else {
            preloadedDark.appendChild(newTheme)
          }
        }
      })
      .catch((error) => {
        console.error('Fetch Error: ', error)
      })
  }

	function prepBackgroundColor() {
		const el = document.querySelector("#site-background-color")
		const savedColor = localStorage.getItem("savedColor")
		if (savedColor) {
			el.value = savedColor
		} else {
			el.value = "oklch(16.009% 0.03076 39.927)"
		}
	}


	function updateBackgroundColor() {
		const el = document.querySelector("#site-background-color")
		document.body.style.backgroundColor = el.value;
		localStorage.setItem("savedColor", el.value)
	}

  document.addEventListener("DOMContentLoaded", () => {
		prepBackgroundColor()
		updateBackgroundColor()
    preloadThemes()
    addEventListeners()
    convertTheme()
  })
</script>

-- h2

Other CSS

This is the rest of the CSS that's on this page. 
Note that they <<code|box-sizing>> and <<code|margin>>
are necessary to tighten up the indvidual elements as
you see them here. 

-- css
-- template: show

*,
*::before,
*::after {
  box-sizing: border-box;
}

* {
  margin: 0;
}

.flow > :where(:not(:first-child)) {
  margin-top: var(--flow-space, 1em);
}

body {
	background-color: black;
	color: #aaa;
}


-- metadata
-- created: 2024-10-11T10:04:06-04:00
-- updated: 2024-10-11T10:04:06-04:00
-- id: 2nil3oan
-- type: post
-- status: draft 
-- no-styles
-- path: /


